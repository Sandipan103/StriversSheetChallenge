/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */
Node* merge(Node* a, Node* b)   {
    if(!a)  {
		b->next = NULL;
		return b;
	}
    if(!b)  {
		a->next = NULL;
		return a;
	}
    if(a->data < b->data)   {
        a->child = merge(a->child, b);
		a->next=NULL;
        return a;
    }
    else    {
        b->child = merge(a, b->child);
		b->next=NULL;
        return b;
    }
}

Node* flattenLinkedList(Node* root)	{
	if(!root || !root->next)    return root;
    Node* m = merge(root, flattenLinkedList(root->next));
	return m;
}