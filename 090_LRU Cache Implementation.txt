#include <bits/stdc++.h>

class LRUCache
{
public:
    class Node {
        public :
        int key, val;
        Node *prev, *next;
        Node(int k, int v)  {
            key = k;
            val = v;
        }
    };

    Node* head = new Node(-1, -1);
    Node* tail = new Node(-1, -1);
    int cap;
    unordered_map<int, Node*> mp;

    void addNode(Node* nd)   {
        Node* temp = head->next;
        nd->next = temp;
        temp->prev = nd;
        nd->prev = head;
        head->next = nd;
    }

    void delNode(Node* nd)  {
        Node* nextNode = nd->next;
        Node* prevNode = nd->prev;
        nextNode->prev = prevNode;
        prevNode->next = nextNode;
    }


    LRUCache(int capacity)
    {
        cap = capacity;
        head->next = tail;
        tail->prev = head;
    }

    int get(int ky)
    {
        if(mp.find(ky) == mp.end()) return -1;

        Node* resNode = mp[ky];
        int x = resNode->val;
        mp.erase(ky);
        delNode(resNode);
        addNode(resNode);
        mp[ky] = head->next;
        return x;
    }

    void put(int ky, int value)
    {
        if(mp.find(ky) != mp.end()) {
            Node* delnd = mp[ky];
            mp.erase(ky);
            delNode(delnd);
        }
        if(mp.size() == cap)    {
            mp.erase(tail->prev->key);
            delNode(tail->prev);
        }
        addNode(new Node(ky, value));
        mp[ky] = head->next;
    }
};
