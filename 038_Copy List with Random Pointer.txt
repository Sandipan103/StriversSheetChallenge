#include <bits/stdc++.h>

/*************************************************************

    Following is the LinkedListNode class structure

    template <typename T>   
    class LinkedListNode
    {
        public:
        T data;
        LinkedListNode<T> *next;
        LinkedListNode<T> *random;
        LinkedListNode(T data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

*************************************************************/

LinkedListNode<int>* helper(LinkedListNode<int>* head, unordered_map<LinkedListNode<int>*, LinkedListNode<int>*>& mp) {
    if(!head)   return NULL;
    LinkedListNode<int>* newHead = new LinkedListNode<int>(head->data);
    mp[head] = newHead;
    newHead->next = helper(head->next, mp);
    newHead->random = mp[head->random];
    return newHead;
}

LinkedListNode<int> *cloneRandomList(LinkedListNode<int>* head) {
    // unordered_map<LinkedListNode<int>*, LinkedListNode<int>*> mp;
    // return helper(head, mp);

    if(!head)   return head;
    LinkedListNode<int>* it = head;
    while(it)   {
        LinkedListNode<int>* temp = new LinkedListNode<int>(it->data);
        temp->next = it->next;
        it->next=temp;
        it=it->next->next;
    }
    it=head;
    while(it)   {
        it->next->random = it->random ? it->random->next : NULL;
        it = it->next->next;
    }
    it=head;
    LinkedListNode<int>* newHead = it->next;
    while(it)   {
        LinkedListNode<int>* clone = it->next;
        it->next = it->next->next;
        if(clone->next) clone->next = clone->next->next;
        it=it->next;
    }
    return newHead;
}